const express = require("express");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const cors = require("cors");
const admin = require("firebase-admin");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("MongoDB Connected"))
    .catch(err => console.log(err));

const UserSchema = new mongoose.Schema({
    email: String,
    password: String,
    fcmToken: String,
});

const User = mongoose.model("User", UserSchema);

// 🔐 JWT Authentication Middleware
const authenticateToken = (req, res, next) => {
    const token = req.header("Authorization");
    if (!token) return res.status(401).json({ error: "Access Denied" });

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ error: "Invalid Token" });
        req.user = user;
        next();
    });
};

// 🛠 Firebase Setup for Notifications
admin.initializeApp({
    credential: admin.credential.cert(require("./firebase-adminsdk.json")),
});

// 🔹 Register User API
app.post("/api/register", async (req, res) => {
    const { email, password, fcmToken } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ email, password: hashedPassword, fcmToken });
    await newUser.save();
    res.json({ message: "User registered successfully!" });
});

// 🔹 Login User API
app.post("/api/login", async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).json({ error: "Invalid credentials" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token, fcmToken: user.fcmToken });
});

// 🔹 Send Traffic Notification API
app.post("/api/notify", authenticateToken, async (req, res) => {
    const { message } = req.body;
    const users = await User.find();

    users.forEach(async (user) => {
        if (user.fcmToken) {
            await admin.messaging().send({
                token: user.fcmToken,
                notification: { title: "Traffic Alert!", body: message },
            });
        }
    });

    res.json({ success: true, message: "Notifications sent!" });
});

app.listen(5000, () => console.log("Server running on port 5000"));
